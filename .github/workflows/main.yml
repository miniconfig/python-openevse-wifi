name: Run Tests
on:
  push:
  pull_request:

jobs:
  pytest:
    name: pytest
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@master
    - name: Install Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.8.0
    - name: Dependencies
      run: |
        pipx install poetry
        source $HOME/.poetry/env
        poetry install
    - name: Run pytest
      run: |
        source $HOME/.poetry/env
        poetry run python -m pytest --cov=openevsewifi --cov-report=xml --cov-branch --cov-fail-under=85 tests/
    - name: Codecov
      uses: codecov/codecov-action@v1.0.5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.xml
        flags: unittests
        name: codecov-pytest
        yml: ./codecov.yml
  release:
    if: startsWith(github.ref, 'refs/tags/v')
    name: Create Release
    needs: [pytest]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@master
    - name: Install Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.8.0
    - name: Dependencies
      run: |
        pipx install poetry
        source $HOME/.poetry/env
        poetry install --no-dev
    - name: Build
      run: |
        source $HOME/.poetry/env
        poetry build
    - name: Publish Beta to GitHub
      uses: softprops/action-gh-release@v0.1.5
      if: contains(github.ref, 'beta')
      with:
        files: dist/*.tar.gz
        prerelease: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: Publish Beta to TestPyPI
      if: contains(github.ref, 'beta')
      env:
        POETRY_HTTP_BASIC_TESTPYPI_USERNAME: __token__
        POETRY_HTTP_BASIC_TESTPYPI_PASSWORD: ${{ secrets.TEST_PYPI_TOKEN }}
      run: |
        source $HOME/.poetry/env
        poetry config repositories.testpypi https://test.pypi.org/legacy/
        poetry publish -r testpypi
    - name: Publish Production Release to GitHub
      uses: softprops/action-gh-release@v0.1.5
      if: contains(github.ref, 'beta') == false
      with:
        files: dist/*.tar.gz
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: Publish Production Release to PyPI
      if: contains(github.ref, 'beta') == false
      env: 
        POETRY_HTTP_BASIC_PYPI_USERNAME: __token__ 
        POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}
      run: |
        source $HOME/.poetry/env
        poetry publish
